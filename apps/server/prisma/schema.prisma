datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  username       String?
  passwordHash   String
  aiCredits      Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  mealLogs       MealLog[]
  ingestRequests IngestRequest[]
  edits          MealLogEdit[]
  shareTokens    LogShareToken[]
  favoriteMeals  FavoriteMeal[]
  usageCounters  AiUsageCounter[]
  iapReceipts    IapReceipt[]
  profile        UserProfile?
  premiumGrants  PremiumGrant[]
  referralsMade  Referral[]       @relation("ReferrerRelation")
  referredBy     Referral?        @relation("ReferredRelation")
  inviteLinks    ReferralInviteLink[]
}

model MealLog {
  id             String          @id @default(cuid())
  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  foodItem       String
  calories       Float
  proteinG       Float
  fatG           Float
  carbsG         Float
  aiRaw          Json?
  zeroFloored    Boolean         @default(false)
  landingType    String?
  mealPeriod     MealPeriod?
  imageUrl       String?
  guardrailNotes String?
  version        Int             @default(1)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  mediaAssets    MediaAsset[]
  ingestRequests IngestRequest[]
  edits          MealLogEdit[]
  shareTokens    LogShareToken[]
  favoritedBy    FavoriteMeal[]  @relation("FavoriteMealSource")
  periodHistory  MealLogPeriodHistory[]

  @@index([userId, createdAt])
}

model MealLogEdit {
  id         Int       @id @default(autoincrement())
  mealLog    MealLog   @relation(fields: [mealLogId], references: [id])
  mealLogId  String
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  changes    Json
  createdAt  DateTime  @default(now())
}

model MealLogPeriodHistory {
  id                Int         @id @default(autoincrement())
  mealLog           MealLog     @relation(fields: [mealLogId], references: [id], onDelete: Cascade)
  mealLogId         String
  previousMealPeriod MealPeriod?
  nextMealPeriod     MealPeriod?
  source            String
  createdAt         DateTime    @default(now())

  @@index([mealLogId, createdAt])
}

model IngestRequest {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  requestKey String
  log        MealLog? @relation(fields: [logId], references: [id])
  logId      String?
  createdAt  DateTime @default(now())

  @@unique([userId, requestKey])
}

model MediaAsset {
  id        Int      @id @default(autoincrement())
  mealLog   MealLog  @relation(fields: [mealLogId], references: [id])
  mealLogId String
  url       String
  mimeType  String
  sizeBytes Int
  createdAt DateTime @default(now())
}

model LogShareToken {
  id           Int      @id @default(autoincrement())
  token        String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  mealLog      MealLog  @relation(fields: [mealLogId], references: [id])
  mealLogId    String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  lastAccessed DateTime?

  @@index([userId, mealLogId])
}

model AiUsageCounter {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  usageDate  DateTime @db.Date
  count      Int      @default(0)
  lastUsedAt DateTime @default(now())

  @@unique([userId, usageDate])
}

model FavoriteMeal {
  id              Int                @id @default(autoincrement())
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  sourceLog       MealLog?           @relation("FavoriteMealSource", fields: [sourceMealLogId], references: [id])
  sourceMealLogId String?
  name            String
  notes           String?
  calories        Float
  proteinG        Float
  fatG            Float
  carbsG          Float
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  items           FavoriteMealItem[]
}

model FavoriteMealItem {
  id             Int          @id @default(autoincrement())
  favoriteMeal   FavoriteMeal @relation(fields: [favoriteMealId], references: [id], onDelete: Cascade)
  favoriteMealId Int
  name           String
  grams          Float
  calories       Float?
  proteinG       Float?
  fatG           Float?
  carbsG         Float?
  orderIndex     Int          @default(0)
}

model IapReceipt {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  platform      IapPlatform
  productId     String
  transactionId String       @unique
  environment   String
  quantity      Int          @default(1)
  creditsGranted Int         @default(0)
  payload       Json?
  status        String
  purchasedAt   DateTime
  verifiedAt    DateTime     @default(now())
  createdAt     DateTime     @default(now())
  premiumGrants PremiumGrant[]

  @@index([userId])
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  UNSPECIFIED
}

enum MeasurementSystem {
  METRIC
  IMPERIAL
}

enum PlanIntensity {
  GENTLE
  STANDARD
  INTENSE
}

model UserProfile {
  id                       Int                @id @default(autoincrement())
  user                     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   Int                @unique
  displayName              String?
  gender                   Gender?
  birthdate                DateTime?
  heightCm                 Float?
  unitPreference           MeasurementSystem? @default(METRIC)
  marketingSource          String?
  goals                    String[]           @default([])
  targetCalories           Int?
  targetProteinG           Float?
  targetFatG               Float?
  targetCarbsG             Float?
  bodyWeightKg             Float?
  currentWeightKg          Float?
  targetWeightKg           Float?
  planIntensity            PlanIntensity?
  targetDate               DateTime?
  activityLevel            String?
  appleHealthLinked        Boolean            @default(false)
  questionnaireCompletedAt DateTime?
  language                 String?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
}

model PremiumGrant {
  id          Int             @id @default(autoincrement())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  source      PremiumSource
  days        Int
  startDate   DateTime
  endDate     DateTime
  referral    Referral?       @relation(fields: [referralId], references: [id])
  referralId  Int?
  iapReceipt  IapReceipt?     @relation(fields: [iapReceiptId], references: [id])
  iapReceiptId Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([userId, endDate])
  @@index([source])
}

model Referral {
  id                Int       @id @default(autoincrement())
  referrerUser      User      @relation("ReferrerRelation", fields: [referrerUserId], references: [id], onDelete: Cascade)
  referrerUserId    Int
  referredUser      User      @relation("ReferredRelation", fields: [referredUserId], references: [id], onDelete: Cascade)
  referredUserId    Int       @unique
  status            ReferralStatus  @default(PENDING)
  friendPremiumGranted Boolean @default(false)
  referrerPremiumGranted Boolean @default(false)
  consecutiveDaysAchieved Int   @default(0)
  deviceFingerprint String?
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  premiumGrants     PremiumGrant[]

  @@index([referrerUserId])
  @@index([status])
  @@index([deviceFingerprint])
}

model ReferralInviteLink {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  code        String    @unique
  clickCount  Int       @default(0)
  signupCount Int       @default(0)
  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime?

  @@index([userId])
  @@index([code])
}

enum MealPeriod {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum IapPlatform {
  APP_STORE
  GOOGLE_PLAY
}

enum PremiumSource {
  REFERRAL_FRIEND
  REFERRAL_REFERRER
  PURCHASE
  ADMIN_GRANT
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
  FRAUD
}
