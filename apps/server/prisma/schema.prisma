datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  username       String?
  passwordHash   String
  plan           UserPlan         @default(FREE)
  aiCredits      Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  mealLogs       MealLog[]
  ingestRequests IngestRequest[]
  edits          MealLogEdit[]
  shareTokens    LogShareToken[]
  favoriteMeals  FavoriteMeal[]
  usageCounters  AiUsageCounter[]
}

model MealLog {
  id             String          @id @default(cuid())
  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  foodItem       String
  calories       Float
  proteinG       Float
  fatG           Float
  carbsG         Float
  aiRaw          Json?
  zeroFloored    Boolean         @default(false)
  landingType    String?
  mealPeriod     MealPeriod?
  imageUrl       String?
  guardrailNotes String?
  version        Int             @default(1)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  mediaAssets    MediaAsset[]
  ingestRequests IngestRequest[]
  edits          MealLogEdit[]
  shareTokens    LogShareToken[]
  favoritedBy    FavoriteMeal[]  @relation("FavoriteMealSource")

  @@index([userId, createdAt])
}

model MealLogEdit {
  id         Int       @id @default(autoincrement())
  mealLog    MealLog   @relation(fields: [mealLogId], references: [id])
  mealLogId  String
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  changes    Json
  createdAt  DateTime  @default(now())
}

model IngestRequest {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  requestKey String
  log        MealLog? @relation(fields: [logId], references: [id])
  logId      String?
  createdAt  DateTime @default(now())

  @@unique([userId, requestKey])
}

model MediaAsset {
  id        Int      @id @default(autoincrement())
  mealLog   MealLog  @relation(fields: [mealLogId], references: [id])
  mealLogId String
  url       String
  mimeType  String
  sizeBytes Int
  createdAt DateTime @default(now())
}

model LogShareToken {
  id           Int      @id @default(autoincrement())
  token        String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  mealLog      MealLog  @relation(fields: [mealLogId], references: [id])
  mealLogId    String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  lastAccessed DateTime?

  @@index([userId, mealLogId])
}

model AiUsageCounter {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  usageDate  DateTime @db.Date
  count      Int      @default(0)
  lastUsedAt DateTime @default(now())

  @@unique([userId, usageDate])
}

model FavoriteMeal {
  id              Int                @id @default(autoincrement())
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  sourceLog       MealLog?           @relation("FavoriteMealSource", fields: [sourceMealLogId], references: [id])
  sourceMealLogId String?
  name            String
  notes           String?
  calories        Float
  proteinG        Float
  fatG            Float
  carbsG          Float
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  items           FavoriteMealItem[]
}

model FavoriteMealItem {
  id             Int          @id @default(autoincrement())
  favoriteMeal   FavoriteMeal @relation(fields: [favoriteMealId], references: [id], onDelete: Cascade)
  favoriteMealId Int
  name           String
  grams          Float
  calories       Float?
  proteinG       Float?
  fatG           Float?
  carbsG         Float?
  orderIndex     Int          @default(0)
}

enum MealPeriod {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum UserPlan {
  FREE
  STANDARD
}
